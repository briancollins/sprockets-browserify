= SprocketsBrowserify

Serve CommonJS modules through Sprockets with the help of Browserify

Add this to your Gemfile:

  gem 'sprockets-browserify'

Place a CommonJS Module in your assets directory and perform a <tt>npm install</tt>:

  /app/assets/javascript/foo
    - index.js
    - package.json
    - node_modules/
      - ...

Require the module within your <tt>application.js</tt>:

  //
  //= require foo/index
  //

Done.

Your node module should fulfill the following requirements:
- The main file for the module must reside in the same directory as the
  <tt>package.json</tt>, in the root of the module
- The main file should expose its API in some way to the browser
  environment, by setting propertes on <tt>window</tt> or sth. like that

If you want to use a module that doesn't conform, consider creating a
wrapper module in you assets directory that requires the module you actually want to use

== WARNING:

By default, the asset pipeline in Rails precompiles every file with a <tt>.js</tt> extension.
This is probably not what you want if you have a bunch of modules in the <tt>node_modules</tt> directory.
Disable this behavior by specifically listing only individual files you want to precompile:

  config.assets.precompile = ['main.js', 'stylesheet.css']

instead of

  config.assets.precompile << 'main.js'

This project rocks and uses MIT-LICENSE.
